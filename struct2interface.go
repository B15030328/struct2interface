package struct2interface

import (
	"fmt"
	"go/ast"
	"go/doc"
	"go/parser"
	"go/token"
	"io/fs"
	"io/ioutil"
	"log"
	"path/filepath"
	"strings"

	"golang.org/x/tools/imports"
)

type Method struct {
	Code string
	Docs []string
}

func (m *Method) Lines() []string {
	var lines []string
	lines = append(lines, m.Docs...)
	lines = append(lines, m.Code)
	return lines
}

func getReceiverTypeName(src []byte, fl interface{}) (string, *ast.FuncDecl) {
	fd, ok := fl.(*ast.FuncDecl)
	if !ok {
		return "", nil
	}
	t, err := getReceiverType(fd)
	if err != nil {
		return "", nil
	}
	st := string(src[t.Pos()-1 : t.End()-1])
	if len(st) > 0 && st[0] == '*' {
		st = st[1:]
	}
	return st, fd
}

func getReceiverType(fd *ast.FuncDecl) (ast.Expr, error) {
	if fd.Recv == nil {
		return nil, fmt.Errorf("fd is not a method, it is a function")
	}
	return fd.Recv.List[0].Type, nil
}

func formatFieldList(src []byte, fl *ast.FieldList, pkgName string) []string {
	if fl == nil {
		return nil
	}
	var parts []string
	for _, l := range fl.List {
		names := make([]string, len(l.Names))
		for i, n := range l.Names {
			names[i] = n.Name
		}
		t := string(src[l.Type.Pos()-1 : l.Type.End()-1])

		if len(names) > 0 {
			typeSharingArgs := strings.Join(names, ", ")
			parts = append(parts, fmt.Sprintf("%s %s", typeSharingArgs, t))
		} else {
			parts = append(parts, t)
		}
	}
	return parts
}

func formatCode(code string) ([]byte, error) {
	opts := &imports.Options{
		TabIndent: true,
		TabWidth:  2,
		Fragment:  true,
		Comments:  true,
	}
	return imports.Process("", []byte(code), opts)
}

func makeInterface(pkgName string, ifaceComment map[string]string, structName string, methods []string, imports []string) ([]byte, error) {
	output := []string{
		"// Code generated by struct2interface; DO NOT EDIT.",
		"",
		"package " + pkgName,
		"import (",
	}
	output = append(output, imports...)
	output = append(output,
		")",
		"",
	)

	output = append(output, fmt.Sprintf("// %s", strings.Replace(ifaceComment[structName], "\n", "\n// ", -1)))
	output = append(output, fmt.Sprintf("type %s interface {", structName+"Interface"))
	output = append(output, methods...)
	output = append(output, "}")

	code := strings.Join(output, "\n")

	result, err := formatCode(code)
	if err != nil {
		fmt.Println(code)
		return nil, err
	}
	return result, nil
}

func parseStruct(src []byte) (pkgName string, structs []string, methods map[string][]Method, imports []string, typeDoc map[string]string, err error) {
	fset := token.NewFileSet()
	a, err := parser.ParseFile(fset, "", src, parser.ParseComments)
	if err != nil {
		return
	}

	pkgName = a.Name.Name

	for _, i := range a.Imports {
		if i.Name != nil {
			imports = append(imports, fmt.Sprintf("%s %s", i.Name.String(), i.Path.Value))
		} else {
			imports = append(imports, i.Path.Value)
		}
	}

	methods = make(map[string][]Method)
	for _, d := range a.Decls {
		if a, fd := getReceiverTypeName(src, d); a != "" {
			if !fd.Name.IsExported() {
				continue
			}
			params := formatFieldList(src, fd.Type.Params, pkgName)
			ret := formatFieldList(src, fd.Type.Results, pkgName)
			method := fmt.Sprintf("%s(%s) (%s)", fd.Name.String(), strings.Join(params, ", "), strings.Join(ret, ", "))
			var docs []string
			if fd.Doc != nil {
				for _, d := range fd.Doc.List {
					docs = append(docs, string(src[d.Pos()-1:d.End()-1]))
				}
			}
			if _, ok := methods[a]; !ok {
				structs = append(structs, a)
			}

			methods[a] = append(methods[a], Method{
				Code: method,
				Docs: docs,
			})
		}
	}

	typeDoc = make(map[string]string)
	pkg := &ast.Package{Files: map[string]*ast.File{"": a}}
	doc := doc.New(pkg, "", doc.AllDecls)
	for _, t := range doc.Types {
		typeDoc[t.Name] = strings.TrimSuffix(t.Doc, "\n")
	}

	return
}

func makeFile(file string) ([]byte, error) {
	allMethods := make(map[string][]string)
	allImports := []string{}
	var structs []string
	// mset := make(map[string]struct{})
	iset := make(map[string]struct{})
	typeDoc := make(map[string]string)
	pkgName := ""

	src, err := ioutil.ReadFile(file)
	if err != nil {
		return nil, err
	}

	pkg, structSlice, methods, imports, parsedTypeDoc, err := parseStruct(src)
	if err != nil {
		log.Println("file:", file)
		return nil, err
	}

	if len(methods) == 0 {
		return nil, nil
	}

	pkgName = pkg
	structs = structSlice

	for _, i := range imports {
		if _, ok := iset[i]; !ok {
			allImports = append(allImports, i)
			iset[i] = struct{}{}
		}
	}

	for structName, mm := range methods {
		typeDoc[structName] = fmt.Sprintf("%s ...\n%s", structName+"Interface", parsedTypeDoc[structName])

		for _, m := range mm {

			// if _, ok := mset[m.Code]; !ok {
			allMethods[structName] = append(allMethods[structName], m.Lines()...)
			// 	mset[m.Code] = struct{}{}
			// }
		}
	}

	var result []byte

	for _, structName := range structs {
		result, err = makeInterface(pkgName, typeDoc, structName, allMethods[structName], allImports)
		if err != nil {
			return nil, err
		}

		dir := filepath.Dir(file)
		output := filepath.Join(dir, "interface_"+structName+".go")

		err := ioutil.WriteFile(output, result, 0644)
		if err != nil {
			return nil, err
		}
		fmt.Println("struct2interface:", dir+": wrote", output)
	}

	return result, nil
}

func MakeDir(dir string) error {

	err := filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error {
		if err != nil {
			log.Fatal(err)
		}

		if d.IsDir() {
			return nil
		}

		if strings.HasPrefix(filepath.Base(path), "interface_") {
			return nil
		}
		if strings.HasPrefix(filepath.Base(path), "mock_") {
			return nil
		}
		if !strings.HasSuffix(filepath.Base(path), ".go") {
			return nil
		}

		result, err := makeFile(path)
		if err != nil {
			log.Fatal("struct2interface.Make failed,", err.Error(), path)
		}

		if len(result) == 0 {
			return nil
		}

		return nil
	})
	if err != nil {
		return err
	}

	return nil
}
